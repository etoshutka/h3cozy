package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"gqlfed/instances/graph/model"
	"time"
)

// DeleteInstance is the resolver for the deleteInstance field.
func (r *mutationResolver) DeleteInstance(ctx context.Context, instanceID string) (bool, error) {
	for i, instance := range Instances {
		if instance.InstanceID == instanceID {
			Instances = append(Instances[:i], Instances[i+1:]...)
			return true, nil
		}
	}
	return false, fmt.Errorf("instance not found: %s", instanceID)
}

// CreateInstance is the resolver for the createInstance field.
func (r *mutationResolver) CreateInstance(ctx context.Context, input model.NewInstanceInput) (*model.Instance, error) {
	panic(fmt.Errorf("not implemented: CreateInstance - createInstance"))
}

// GetInstanceList is the resolver for the getInstanceList field.
func (r *queryResolver) GetInstanceList(ctx context.Context, projectID string) ([]*model.Instance, error) {
	return Instances, nil
}

// GetInstanceItem is the resolver for the getInstanceItem field.
func (r *queryResolver) GetInstanceItem(ctx context.Context, instanceID string) (*model.Instance, error) {
	for _, instance := range mockInstanceLiveUpd() {
		if instance.InstanceID == instanceID {
			return instance, nil
		}
	}
	return nil, fmt.Errorf("instance not found: %s", instanceID)
}

// GetFlavorList is the resolver for the getFlavorList field.
func (r *queryResolver) GetFlavorList(ctx context.Context) ([]*model.KVStringListOfFlavor, error) {
	// Convert mockFlavorList to []*model.KVStringListOfFlavor
	flavorList := make([]*model.KVStringListOfFlavor, len(mockFlavorList))
	for i, flavor := range mockFlavorList {
		flavorList[i] = &model.KVStringListOfFlavor{
			Key: flavor.OriginalName,
			Value: []model.Flavor{
				flavor,
			},
		}
	}
	return flavorList, nil
}

// GetImageList is the resolver for the getImageList field.
func (r *queryResolver) GetImageList(ctx context.Context) ([]*model.Image, error) {
	return mockImages, nil
}

// GetSSHKeys is the resolver for the getSSHKeys field.
func (r *queryResolver) GetSSHKeys(ctx context.Context) ([]*model.SSHKey, error) {
	return mockSSHKeys, nil
}

// GetNetworkList is the resolver for the getNetworkList field.
func (r *queryResolver) GetNetworkList(ctx context.Context) ([]*model.Network, error) {
	return mockNetworks, nil
}

// InstancesUpdates is the resolver for the instancesUpdates field.
func (r *subscriptionResolver) InstancesUpdates(ctx context.Context) (<-chan []*model.Instance, error) {
	instanceChan := make(chan []*model.Instance, 1)
	go func() {
		for {
			instanceChan <- mockInstanceLiveUpd()
			time.Sleep(2 * time.Second)
		}
	}()
	return instanceChan, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
