// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type Flavor interface {
	IsFlavor()
}

type BaseFlavor struct {
	OriginalName string `json:"original_name"`
	Vcpus        string `json:"vcpus"`
	RAM          string `json:"ram"`
	RubMonth     string `json:"rub_month"`
}

func (BaseFlavor) IsFlavor() {}

type Disk struct {
	DiskID    string      `json:"disk_id"`
	SizeGb    int32       `json:"size_gb"`
	Bootable  bool        `json:"bootable"`
	Status    string      `json:"status"`
	Instances []*Instance `json:"instances"`
	Image     *Image      `json:"image,omitempty"`
}

type HiFreqFlavor struct {
	OriginalName string `json:"original_name"`
	Vcpus        string `json:"vcpus"`
	RAM          string `json:"ram"`
	RubMonth     string `json:"rub_month"`
}

func (HiFreqFlavor) IsFlavor() {}

type Image struct {
	ImageID    string          `json:"image_id"`
	Label      string          `json:"label"`
	OsVersions []*ImageVersion `json:"osVersions"`
	CPU        *MinRec         `json:"cpu"`
	RAMGb      *MinRec         `json:"ram_gb"`
	DiskGb     *MinRec         `json:"disk_gb"`
}

type ImageVersion struct {
	VersionName string `json:"versionName"`
	ImageVerID  string `json:"imageVerId"`
}

type Instance struct {
	InstanceID       string     `json:"instance_id"`
	ProjectID        string     `json:"project_id"`
	Name             string     `json:"name"`
	Status           string     `json:"status"`
	Created          string     `json:"created"`
	Updated          string     `json:"updated"`
	KeyName          string     `json:"key_name"`
	Flavor           Flavor     `json:"flavor"`
	Locked           bool       `json:"locked"`
	Loading          bool       `json:"loading"`
	PowerState       string     `json:"power_state"`
	IPV4             string     `json:"ipV4"`
	AttachedDisks    []*Disk    `json:"attachedDisks"`
	AttachedNetworks []*Network `json:"attachedNetworks"`
}

type KVStringListOfFlavor struct {
	Key   string   `json:"key"`
	Value []Flavor `json:"value"`
}

type MinRec struct {
	Min int32 `json:"min"`
	Rec int32 `json:"rec"`
}

type Mutation struct {
}

type Network struct {
	NetworkID        string `json:"network_id"`
	NetworkName      string `json:"network_name"`
	Cidr             string `json:"cidr"`
	GatewayIP        string `json:"gateway_ip"`
	IsPublic         bool   `json:"is_public"`
	IPV4             string `json:"ipV4"`
	AvailabilityZone string `json:"availability_zone"`
	Region           string `json:"region"`
	SecurityGroupID  string `json:"security_group_id"`
}

type NewInstanceInput struct {
	ID           string `json:"id"`
	Hostname     string `json:"hostname"`
	Region       string `json:"region"`
	InstanceType string `json:"instanceType"`
	ImageID      string `json:"imageId"`
	State        string `json:"state"`
}

type PremiumFlavor struct {
	OriginalName string `json:"original_name"`
	Vcpus        string `json:"vcpus"`
	RAM          string `json:"ram"`
	RubMonth     string `json:"rub_month"`
}

func (PremiumFlavor) IsFlavor() {}

type ProFlavor struct {
	OriginalName string `json:"original_name"`
	Vcpus        string `json:"vcpus"`
	RAM          string `json:"ram"`
	RubMonth     string `json:"rub_month"`
}

func (ProFlavor) IsFlavor() {}

type Query struct {
}

type SSHKey struct {
	Name      string      `json:"name"`
	PublicKey string      `json:"publicKey"`
	Instances []*Instance `json:"instances,omitempty"`
}

type Subscription struct {
}

type User struct {
	UserID    string    `json:"user_id"`
	UserName  string    `json:"user_name"`
	CompanyID string    `json:"company_id"`
	SSHKeys   []*SSHKey `json:"sshKeys,omitempty"`
}

func (User) IsEntity() {}
